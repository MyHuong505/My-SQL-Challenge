--1. What is the total amount each customer spent at the restaurant?
SELECT
sales.customer_id,
  SUM(menu.price) AS total_sales
FROM sales
INNER JOIN menu
  ON sales.product_id = menu.product_id
GROUP BY sales.customer_id
ORDER BY sales.customer_id ASC;
GO

--2. How many days has each customer visited the restaurant?
SELECT
	customer_id,
	COUNT(DISTINCT order_date) AS visit_count
FROM sales
GROUP BY customer_id
GO

--3. What was the first item from the menu purchased by each customer?
SELECT sales.customer_id, menu.product_name
FROM sales
INNER JOIN menu
ON sales.product_id = menu.product_id
INNER JOIN (
  SELECT customer_id, MIN(order_date) AS first_purchase
  FROM sales
  GROUP BY customer_id
) AS first_sales 
ON sales.customer_id = first_sales.customer_id 
AND sales.order_date = first_sales.first_purchase;
GO

--4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT TOP 1
  menu.product_name,
  COUNT(sales.product_id) AS most_purchased_item
FROM sales
INNER JOIN menu
  ON sales.product_id = menu.product_id
GROUP BY menu.product_name
ORDER BY most_purchased_item DESC
GO

--5. Which item was the most popular for each customer?
--Solution #1
WITH customer_items AS (
  SELECT 
    s.customer_id, 
    m.product_name, 
    COUNT(*) AS item_count
  FROM sales s
  INNER JOIN menu m ON s.product_id = m.product_id
  GROUP BY s.customer_id, m.product_name
)

SELECT ci.customer_id, ci.product_name, ci.item_count
FROM customer_items ci
WHERE ci.item_count = (
  SELECT MAX(item_count)
  FROM customer_items
  WHERE customer_id = ci.customer_id
)
ORDER BY ci.customer_id;
GO

--Solution #2
WITH most_popular AS (
  SELECT 
    sales.customer_id, 
    menu.product_name, 
    COUNT(menu.product_id) AS order_count,
    DENSE_RANK() OVER (
      PARTITION BY sales.customer_id 
      ORDER BY COUNT(sales.customer_id) DESC) AS rank
  FROM menu
  INNER JOIN sales
    ON menu.product_id = sales.product_id
  GROUP BY sales.customer_id, menu.product_name
)
SELECT 
  customer_id, 
  product_name, 
  order_count
FROM most_popular 
WHERE rank = 1;
GO

--6. Which item was purchased first by the customer after they became a member?
--Solution 1
SELECT sales.customer_id,
       menu.product_name AS first_purchased_item
FROM sales
JOIN menu ON sales.product_id = menu.product_id
JOIN members ON sales.customer_id = members.customer_id
WHERE sales.order_date = (
    SELECT MIN(order_date)
    FROM sales AS s
    WHERE s.customer_id = sales.customer_id
      AND s.order_date > members.join_date
)
ORDER BY sales.customer_id;
GO

--Solution 2
SELECT customer_id, product_name
FROM (
    SELECT 
        members.customer_id,
        menu.product_name,
        ROW_NUMBER() OVER (
            PARTITION BY members.customer_id
            ORDER BY sales.order_date
        ) AS row_num
    FROM sales
    JOIN menu ON sales.product_id = menu.product_id
    JOIN members ON sales.customer_id = members.customer_id
    WHERE sales.order_date > members.join_date
) AS ranked_orders
WHERE row_num = 1
ORDER BY customer_id;
GO

--7. Which item was purchased just before the customer became a member?
--Solution 1
SELECT sales.customer_id,
       menu.product_name AS last_purchased_item_before_membership
FROM sales
JOIN menu ON sales.product_id = menu.product_id
JOIN members ON sales.customer_id = members.customer_id
WHERE sales.order_date = (
    SELECT MAX(s.order_date)
    FROM sales AS s
    WHERE s.customer_id = sales.customer_id
      AND s.order_date < members.join_date
)
ORDER BY sales.customer_id;
GO

--Solution 2
SELECT customer_id, product_name
FROM (
    SELECT 
        members.customer_id,
        menu.product_name,
        ROW_NUMBER() OVER (
            PARTITION BY members.customer_id
            ORDER BY sales.order_date DESC
        ) AS row_num
    FROM sales
    JOIN menu ON sales.product_id = menu.product_id
    JOIN members ON sales.customer_id = members.customer_id
    WHERE sales.order_date < members.join_date
) AS ranked_orders
WHERE row_num = 1
ORDER BY customer_id;
GO

--8. What is the total items and amount spent for each member before they became a member?
SELECT
    sales.customer_id,
    COUNT(sales.product_id) AS total_items,
    SUM(menu.price) AS total_amount_spent
FROM sales
JOIN menu ON sales.product_id = menu.product_id
JOIN members ON sales.customer_id = members.customer_id
WHERE sales.order_date < members.join_date
GROUP BY sales.customer_id
ORDER BY sales.customer_id;
GO

--9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier — how many points would each customer have?
SELECT sales.customer_id,
       SUM(CASE
               WHEN menu.product_name = 'sushi' THEN menu.price * 20
               ELSE menu.price * 10
           END) AS total_points
FROM sales
JOIN menu ON sales.product_id = menu.product_id
GROUP BY sales.customer_id;
GO

--10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, 
--not just sushi — how many points do customer A and B have at the end of January?
WITH dates AS (
  SELECT 
    customer_id, 
    join_date, 
    DATEADD(day, 6, join_date) AS valid_date, 
    EOMONTH('2021-01-31') AS last_date
  FROM members
)
SELECT 
  sales.customer_id, 
  SUM(CASE
    WHEN menu.product_name = 'sushi' THEN 2 * 10 * menu.price
    WHEN sales.order_date BETWEEN dates.join_date AND dates.valid_date THEN 2 * 10 * menu.price
    ELSE 10 * menu.price END) AS points
FROM sales
INNER JOIN dates
  ON sales.customer_id = dates.customer_id
  AND dates.join_date <= sales.order_date
  AND sales.order_date <= dates.last_date
INNER JOIN menu
  ON sales.product_id = menu.product_id
GROUP BY sales.customer_id;
GO
