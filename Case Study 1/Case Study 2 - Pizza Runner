CREATE TABLE customer_orders_temp (
    order_id INT,
    customer_id INT,
    pizza_id INT,
    exclusions VARCHAR(50),
    extras VARCHAR(50),
    order_time DATETIME
);

INSERT INTO customer_orders_temp (order_id, customer_id, pizza_id, exclusions, extras, order_time)
VALUES 
(1, 101, 1, '', '', '2021-01-01 18:05:02.000'),
(2, 101, 1, '', '', '2021-01-01 19:00:52.000'),
(3, 102, 1, '', '', '2021-01-02 23:51:23.000'),
(3, 102, 2, '', '', '2021-01-02 23:51:23.000'),
(4, 103, 1, '4', '', '2021-01-04 13:23:46.000'),
(4, 103, 1, '4', '', '2021-01-04 13:23:46.000'),
(4, 103, 2, '4', '', '2021-01-04 13:23:46.000'),
(5, 104, 1, '', '1', '2021-01-08 21:00:29.000'),
(6, 101, 2, '', '', '2021-01-08 21:03:13.000'),
(7, 105, 2, '', '1', '2021-01-08 21:20:29.000'),
(8, 102, 1, '', '', '2021-01-09 23:54:33.000'),
(9, 103, 1, '4', '1,5', '2021-01-10 11:22:59.000'),
(10, 104, 1, '', '', '2021-01-11 18:34:49.000'),
(10, 104, 1, '2,6', '1,4', '2021-01-11 18:34:49.000');

CREATE TABLE runner_orders_temp (
    order_id INT,
    runner_id INT,
    pickup_time VARCHAR(255),
    distance VARCHAR(50),
    duration VARCHAR(50),
    cancellation VARCHAR(255)
);

INSERT INTO runner_orders_temp (order_id, runner_id, pickup_time, distance, duration, cancellation)
VALUES 
(1, 1, '2021-01-01 18:15:34', '20', '32', ''),
(2, 1, '2021-01-01 19:10:54', '20', '27', ''),
(3, 1, '2021-01-03 00:12:37', '13.4', '20', ''),
(4, 2, '2021-01-04 13:53:03', '23.4', '40', ''),
(5, 3, '2021-01-08 21:10:57', '10', '15', ''),
(6, 3, '', '', '', 'Restaurant Cancellation'),
(7, 2, '2021-01-08 21:30:45', '25', '25', ''),
(8, 2, '2021-01-10 00:15:02', '23.4', '15', ''),
(9, 2, '', '', '', 'Customer Cancellation'),
(10, 1, '2021-01-11 18:50:20', '10', '10', '');
ALTER TABLE runner_orders_temp
ALTER COLUMN pickup_time DATETIME;
ALTER TABLE runner_orders_temp
ALTER COLUMN distance FLOAT;
ALTER TABLE runner_orders_temp
ALTER COLUMN duration INT;


CREATE TABLE pizza_names (
    pizza_id INT,
    pizza_name VARCHAR(255)
);

INSERT INTO pizza_names (pizza_id, pizza_name) 
VALUES 
(1, 'Mealovers'),
(2, 'Vegetarian');

CREATE TABLE runners (
    runner_id INT,
    registration_date DATETIME
);

INSERT INTO runners (runner_id, registration_date)
VALUES 
  (1, '2024-01-15 10:30:00'),
  (2, '2024-01-15 16:20:00'),
  (3, '2024-03-05 09:15:00'),
  (4, '2024-04-12 16:20:00'),
  (5, '2024-05-28 11:00:00');
  

CREATE TABLE pizza_recipes (
    pizza_id INT,
    toppings VARCHAR(255)
);

INSERT INTO pizza_recipes (pizza_id, toppings)
VALUES 
   (1, '1,2,4'),   -- Margherita: Tomato sauce, Mozzarella, Basil
   (2, '1,3,8'),   -- Pepperoni: Tomato sauce, Mozzarella, Pepperoni
   (3, '4,5,6,9'), -- Veggie: Tomato sauce, Mozzarella, Mushrooms, Onions, Peppers
   (4, '1,2,3,7'); -- Meat Lovers: Tomato sauce, Mozzarella, Beef, Sausage


CREATE TABLE pizza_toppings (
    topping_id INT,
   topping_name VARCHAR(255)
);

INSERT INTO pizza_toppings (topping_id, topping_name)
VALUES
   (1, 'Tomato sauce'),
   (2, 'Mozzarella'),
   (3, 'Pepperoni'),
   (4, 'Mushrooms'),
   (5, 'Onions'),
   (6, 'Peppers'),
   (7, 'Sausage'),
   (8, 'Basil'),
   (9, 'Beef');
   GO

--A. Pizza Metrics
--1. How many pizzas were order
SELECT COUNT(*) AS PIZZA_ORDER_COUNT
FROM customer_orders_temp 
GO

--2. How many unique customer orders were made?
SELECT COUNT(DISTINCT order_id) AS unique_order_count
FROM customer_orders_temp;
GO

--3. How many successful orders were delivered by each runner?
SELECT runner_id, COUNT(order_id) AS successful_orders
FROM runner_orders_temp
WHERE distance != 0
GROUP BY runner_id
GO

--4. How many of each type of pizza was delivered?
SELECT pn.pizza_name, COUNT(co.pizza_id) AS delivered_pizza_count
FROM customer_orders_temp co
JOIN runner_orders_temp ro ON ro.order_id = co.order_id
JOIN pizza_names pn ON pn.pizza_id = co.pizza_id
WHERE distance != 0
GROUP BY co.pizza_id, pn.pizza_name
GO

--5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT 
    co.customer_id, 
    pn.pizza_name,
    COUNT(co.pizza_id) AS pizza_count
FROM customer_orders_temp co
JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
GROUP BY co.customer_id, pn.pizza_name;
GO

--6. What was the maximum number of pizzas delivered in a single order?
SELECT 
    MAX(pizza_per_order) AS pizza_count
FROM (
    SELECT 
        c.order_id, 
        COUNT(c.pizza_id) AS pizza_per_order
    FROM 
        customer_orders_temp AS c
        JOIN runner_orders_temp AS r ON c.order_id = r.order_id
    WHERE 
        r.distance != 0
    GROUP BY 
        c.order_id
) AS pizza_count_cte;

--7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT 
  c.customer_id,
  SUM(
    CASE WHEN c.exclusions <> ' ' OR c.extras <> ' ' THEN 1
    ELSE 0
    END) AS at_least_1_change,
  SUM(
    CASE WHEN c.exclusions = ' ' AND c.extras = ' ' THEN 1 
    ELSE 0
    END) AS no_change
FROM customer_orders_temp AS c
JOIN runner_orders_temp AS r
  ON c.order_id = r.order_id
WHERE r.distance != 0
GROUP BY c.customer_id
GO

--8. How many pizzas were delivered that had both exclusions and extras?
SELECT 
  SUM(
    CASE WHEN c.exclusions <> ' ' AND c.extras <> ' ' THEN 1
    ELSE 0
    END) AS has_both_changes
FROM customer_orders_temp AS c
JOIN runner_orders_temp AS r
  ON c.order_id = r.order_id
WHERE r.distance != 0 AND exclusions <> ' '  AND extras <> ' '
GROUP BY c.customer_id
GO

9. What was the total volume of pizzas ordered for each hour of the day?





SELECT co.order_id,
       pn.pizza_name
       + COALESCE(' - Exclude ' + excl.exclusion_toppings, '')
       + COALESCE(' - Extra ' + ext.extra_toppings, '') AS order_description
FROM customer_orders_temp co
JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
LEFT JOIN (
    SELECT co.order_id,
           STRING_AGG(pt.topping_name, ', ') AS exclusion_toppings
    FROM customer_orders_temp co
    CROSS APPLY STRING_SPLIT(co.exclusions, ',') AS split_ex
    JOIN pizza_toppings pt ON pt.topping_id = split_ex.value
    GROUP BY co.order_id
) excl ON co.order_id = excl.order_id
LEFT JOIN (
    SELECT co.order_id,
           STRING_AGG(pt.topping_name, ', ') AS extra_toppings
    FROM customer_orders_temp co
    CROSS APPLY STRING_SPLIT(co.extras, ',') AS split_ex
    JOIN pizza_toppings pt ON pt.topping_id = split_ex.value
    GROUP BY co.order_id
) ext ON co.order_id = ext.order_id
ORDER BY co.order_id;

--9. What was the total volume of pizzas ordered for each hour of the day?
SELECT 
  DATEPART(HOUR, [order_time]) AS hour_of_day, 
  COUNT(order_id) AS pizza_count
FROM customer_orders_temp
GROUP BY DATEPART(HOUR, [order_time]);
GO

--10. What was the volume of orders for each day of the week?
SELECT 
  FORMAT(order_time,'dddd') AS day_of_week, 
  COUNT(order_id) AS total_pizzas_ordered
FROM customer_orders_temp
GROUP BY  FORMAT( order_time,'dddd') 
GO

--B. Runner and Customer Experience
--1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT 
  DATEPART(WEEK, registration_date) AS registration_week,
  COUNT(runner_id) AS runner_signup
FROM runners
GROUP BY DATEPART(WEEK, registration_date);
GO

--2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
WITH time_taken_cte AS
(
  SELECT 
    c.order_id, 
    c.order_time, 
    r.pickup_time, 
    DATEDIFF(MINUTE, c.order_time, r.pickup_time) AS pickup_minutes
  FROM customer_orders_temp AS c
  JOIN runner_orders_temp AS r
    ON c.order_id = r.order_id
  WHERE r.distance != 0
  GROUP BY c.order_id, c.order_time, r.pickup_time
)

SELECT 
  AVG(pickup_minutes) AS avg_pickup_minutes
FROM time_taken_cte
WHERE pickup_minutes > 1;
GO

--3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
WITH prep_time_cte AS
(
  SELECT 
    c.order_id, 
    COUNT(c.order_id) AS pizza_order, 
    c.order_time, 
    r.pickup_time, 
    DATEDIFF(MINUTE, c.order_time, r.pickup_time) AS prep_time_minutes
  FROM customer_orders_temp AS c
  JOIN runner_orders_temp AS r
    ON c.order_id = r.order_id
  WHERE r.distance != 0
  GROUP BY c.order_id, c.order_time, r.pickup_time
)

SELECT 
  p.pizza_order, 
  AVG(p.prep_time_minutes) AS avg_prep_time_minutes,
  AVG(r.distance) AS avg_distance
FROM prep_time_cte p
JOIN customer_orders_temp AS c ON p.order_id = c.order_id
JOIN runner_orders_temp AS r ON p.order_id = r.order_id
WHERE p.prep_time_minutes > 1
  AND r.duration != 0
GROUP BY p.pizza_order;
GO

--5. What was the difference between the longest and shortest delivery times for all orders?
SELECT 
  MAX(duration)- MIN(duration) AS delivery_time_difference
FROM runner_orders_temp
WHERE duration != 0;
GO

--6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
SELECT 
  r.runner_id, 
  c.customer_id, 
  c.order_id, 
  COUNT(c.order_id) AS pizza_count, 
  r.distance, (r.duration / 60) AS duration_hr , 
  ROUND((r.distance/r.duration * 60), 2) AS avg_speed
FROM runner_orders_temp AS r
JOIN customer_orders_temp AS c
  ON r.order_id = c.order_id
WHERE distance != 0
GROUP BY r.runner_id, c.customer_id, c.order_id, r.distance, r.duration
ORDER BY c.order_id;
GO

--7. What is the successful delivery percentage for each runner?
SELECT 
  runner_id, 
  ROUND(100 * SUM(
    CASE WHEN distance = 0 THEN 0
    ELSE 1 END) / COUNT(*), 0) AS success_perc
FROM runner_orders_temp
GROUP BY runner_id;
GO

--C. Ingredient Optimisation
--2. What was the most commonly added extra?
WITH toppings_cte AS (
  SELECT
    pizza_id,
    CAST(value AS INT) AS topping_id
  FROM pizza_recipes
  CROSS APPLY STRING_SPLIT(toppings, ',') 
)
SELECT 
  t.topping_id, 
  pt.topping_name, 
  COUNT(t.topping_id) AS topping_count
FROM toppings_cte t
INNER JOIN pizza_toppings pt
  ON t.topping_id = pt.topping_id
GROUP BY t.topping_id, pt.topping_name
ORDER BY topping_count DESC;
GO

--4. Generate an order item for each record in the customers_orders table in the format of one of the following:Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
SELECT co.order_id,
pn.pizza_name
+ COALESCE(' - Exclude ' + excl.exclusion_toppings, '')
+ COALESCE(' - Extra ' + ext.extra_toppings, '') AS order_description
FROM customer_orders_temp co
JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
LEFT JOIN (
SELECT co.order_id,
STRING_AGG(pt.topping_name, ', ') AS exclusion_toppings
FROM customer_orders_temp co
CROSS APPLY STRING_SPLIT(co.exclusions, ',') AS split_ex
JOIN pizza_toppings pt ON pt.topping_id = split_ex.value
GROUP BY co.order_id
) excl ON co.order_id = excl.order_id
LEFT JOIN (
SELECT co.order_id,
STRING_AGG(pt.topping_name, ', ') AS extra_toppings
FROM customer_orders_temp co
CROSS APPLY STRING_SPLIT(co.extras, ',') AS split_ex
JOIN pizza_toppings pt ON pt.topping_id = split_ex.value
GROUP BY co.order_id
) ext ON co.order_id = ext.order_id
GO

